"use strict";(self.webpackChunkmonk_website=self.webpackChunkmonk_website||[]).push([[810],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),m=i,g=p["".concat(l,".").concat(m)]||p[m]||d[m]||a;return t?r.createElement(g,o(o({ref:n},u),{},{components:t})):r.createElement(g,o({ref:n},u))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},6163:(e,n,t)=>{t.r(n),t.d(n,{frontMatter:()=>s,contentTitle:()=>l,metadata:()=>c,toc:()=>u,default:()=>p});var r=t(7462),i=t(3366),a=(t(7294),t(3905)),o=["components"],s={id:"requesting",title:"\ud83d\udce8 Requesting data",slug:"/js/guides/requesting"},l=void 0,c={unversionedId:"js/guides/requesting",id:"js/guides/requesting",title:"\ud83d\udce8 Requesting data",description:"In this guide, you will be able to call Monk Core Servers",source:"@site/docs/js/guides/requesting.md",sourceDirName:"js/guides",slug:"/js/guides/requesting",permalink:"/monkjs/docs/js/guides/requesting",tags:[],version:"current",frontMatter:{id:"requesting",title:"\ud83d\udce8 Requesting data",slug:"/js/guides/requesting"},sidebar:"docsSidebar",previous:{title:"\ud83d\udcf7 Taking pictures",permalink:"/monkjs/docs/js/guides/picturing"},next:{title:"\ud83e\uddff Visualizing",permalink:"/monkjs/docs/js/guides/visualizing"}},u=[{value:"Configuration",id:"configuration",children:[],level:2},{value:"Usage",id:"usage",children:[],level:2},{value:"Go further",id:"go-further",children:[{value:"Normalization",id:"normalization",children:[],level:3},{value:"Implement with Redux",id:"implement-with-redux",children:[{value:"Slices",id:"slices",children:[],level:4},{value:"Reducers",id:"reducers",children:[],level:4},{value:"Selectors &amp; Actions",id:"selectors--actions",children:[],level:4}],level:3}],level:2},{value:"What&#39;s next?",id:"whats-next",children:[],level:2}],d={toc:u};function p(e){var n=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In this guide, you will be able to call Monk Core Servers\nand received an axiosResponse in addition to normalized entities and results."),(0,a.kt)("p",null,"Install ",(0,a.kt)("inlineCode",{parentName:"p"},"@monkvision/corejs")," from ",(0,a.kt)("inlineCode",{parentName:"p"},"npm")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-npm"},"npm install @monkvision/corejs --save\n")),(0,a.kt)("p",null,"Install ",(0,a.kt)("inlineCode",{parentName:"p"},"@monkvision/corejs")," from ",(0,a.kt)("inlineCode",{parentName:"p"},"yarn")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yarn"},"yarn add @monkvision/corejs\n")),(0,a.kt)("h2",{id:"configuration"},"Configuration"),(0,a.kt)("p",null,"Be sure to have a valid access token with the right permissions.\nSee more details about ",(0,a.kt)("a",{parentName:"p",href:"/monkjs/docs/js/guides/authenticating"},"authenticating")," in the dedicated section."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import monk from '@monkvision/corejs';\n\nmonk.config.accessToken = myOwnAccessToken;\n")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import monk from '@monkvision/corejs';\n\nconst {\n  axiosResponse, // https://axios-http.com/docs/res_schema\n  entities, // https://github.com/paularmstrong/normalizr\n  result,\n} = await monk.entity.inspection.getOne('one-valid-inspection-id');\n")),(0,a.kt)("h2",{id:"go-further"},"Go further"),(0,a.kt)("p",null,"You can go further by optimizing your queries and your state\nthanks to Redux and data normalization.\nOtherwise, you can skip to the section dedicated to viewing the results."),(0,a.kt)("h3",{id:"normalization"},"Normalization"),(0,a.kt)("p",null,"Under the hood, Monk uses several reducers to manage its slightly complex state.\nWe then identify the main entities which are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/js/api/inspection"},"Inspection")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/js/api/damage"},"Damage")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/js/api/image"},"Image")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/js/api/task"},"Task"))),(0,a.kt)("p",null,"When a query is executed via @monkvision/corejs,\nthe result will be automatically normalized and always return ",(0,a.kt)("inlineCode",{parentName:"p"},"results")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"entities"),".\nTo learn more about data normalization,\nyou can refer to ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/paularmstrong/normalizr"},"paularmstrong/normalizr"),"."),(0,a.kt)("h3",{id:"implement-with-redux"},"Implement with Redux"),(0,a.kt)("p",null,"In order to optimize queries or to cache data,\nwe can use these results and implement them\nvia different solutions such as ",(0,a.kt)("em",{parentName:"p"},"Redux"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yarn"},"yarn add redux @reduxjs/toolkit\n")),(0,a.kt)("p",null,"That includes\n",(0,a.kt)("a",{parentName:"p",href:"https://redux-toolkit.js.org/introduction/getting-started#whats-included"},"Redux Toolkit APIs"),"\nsuch as ",(0,a.kt)("a",{parentName:"p",href:"https://redux-toolkit.js.org/api/configureStore"},"configureStore()"),"."),(0,a.kt)("h4",{id:"slices"},"Slices"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},'Redux state is typically organized into "slices",\ndefined by the reducers that are passed to combineReducers.\nSee full documentation on\n',(0,a.kt)("a",{parentName:"p",href:"https://redux-toolkit.js.org/usage/usage-guide#creating-slices-of-state"},"redux-toolkit.js.org"),".")),(0,a.kt)("h4",{id:"reducers"},"Reducers"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import monk from '@monkvision/corejs';\nimport { combineReducers } from 'redux';\nimport { configureStore } from '@reduxjs/toolkit'\n\nconst rootReducer = combineReducers({\n  ...monk.reducers,\n  // your own reducers...\n});\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nexport default store;\n")),(0,a.kt)("h4",{id:"selectors--actions"},"Selectors & Actions"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import React, { useCallback, useEffect, useState } from 'react';\nimport monk from '@monkvision/corejs';\nimport { useDispatch } from 'react-redux';\n\nconst { entity } = monk;\n\nfunction Inspection({ id = 'one-valid-inspection-id' }) {\n  const dispatch = useDispatch();\n\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(null)\n  const catchLoadingError = useCallback((e) => {\n    setLoading(false);\n    setError(e);\n  }, [setLoading, setError])\n\n  const getOneInspection = useCallback(async (id, showDeletedObjects) => {\n    if (!loading) {\n      setLoading(true);\n\n      try {\n        const response = await entity.inspection.getOne(id, { showDeletedObjects });\n        dispatch({ type: `${entity.inspection.name}/gotOne`, payload: response });\n        setLoading(false);\n      } catch (e) {\n        catchLoadingError(e);\n      }\n    }\n  }, [loading]);\n\n  const inspection = entity.inspection.selectors.selectById(id);\n\n  useEffect(() => {\n    getOneInspection(id, false);\n  }, [getOneInspection, id]);\n\n  if (loading) {\n    return 'Loading...';\n  }\n\n  return (\n    <>\n      ...\n    </>\n  );\n}\n")),(0,a.kt)("h2",{id:"whats-next"},"What's next?"),(0,a.kt)("p",null,"You will use the components dedicated to the visualization of our data\nsuch as the display of the damage of an inspection."))}p.isMDXComponent=!0}}]);