"use strict";(self.webpackChunkmonk_website=self.webpackChunkmonk_website||[]).push([[732],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),u=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=u(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=u(n),g=r,h=d["".concat(c,".").concat(g)]||d[g]||p[g]||o;return n?a.createElement(h,i(i({ref:t},l),{},{components:n})):a.createElement(h,i({ref:t},l))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2351:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>s,contentTitle:()=>c,metadata:()=>u,toc:()=>l,default:()=>d});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],s={id:"picturing",title:"\ud83d\udcf7 Taking pictures",slug:"/js/guides/picturing"},c=void 0,u={unversionedId:"js/guides/picturing",id:"js/guides/picturing",title:"\ud83d\udcf7 Taking pictures",description:"Open a React based project with our favorite IDE, then import the Camera view called `Capture`.",source:"@site/docs/js/guides/picturing.md",sourceDirName:"js/guides",slug:"/js/guides/picturing",permalink:"/monkjs/docs/js/guides/picturing",tags:[],version:"current",frontMatter:{id:"picturing",title:"\ud83d\udcf7 Taking pictures",slug:"/js/guides/picturing"},sidebar:"docsSidebar",previous:{title:"\u2699\ufe0f Setting up",permalink:"/monkjs/docs/js/guides/setting-up"},next:{title:"\ud83d\udd13 Authenticate",permalink:"/monkjs/docs/js/guides/authenticating"}},l=[{value:"Basic usage",id:"basic-usage",children:[],level:2},{value:"Advanced usage",id:"advanced-usage",children:[],level:2},{value:"What&#39;s next?",id:"whats-next",children:[],level:2}],p={toc:l};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Open a React based project with our favorite IDE, then import the Camera view called ",(0,o.kt)("inlineCode",{parentName:"p"},"Capture"),"."),(0,o.kt)("p",null,"A tunnel view will be created for taking pictures. ",(0,o.kt)("inlineCode",{parentName:"p"},"<Capture />")," takes callbacks and can be composed with your own logic."),(0,o.kt)("h2",{id:"basic-usage"},"Basic usage"),(0,o.kt)("p",null,"The Capture component provides a built-in capture handler which will take care of the whole capturing process."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"/* App.jsx */\n\nimport React, { useCallback, useState } from 'react';\nimport { Capture, Controls, Constants, useUploads } from '@monkvision/camera';\nimport { SafeAreaView, StatusBar } from 'react-native';\n\nexport default function App() {\n  const [loading, setLoading] = useState();\n\n  const uploads = useUploads({ sightIds: Constants.defaultSightIds });\n\n  const controls = [{\n    disabled: loading,\n    ...Controls.CaptureButtonProps,\n  }];\n\n  return (\n    <SafeAreaView>\n      <StatusBar hidden />\n       <Capture\n        sightIds={Constants.defaultSightIds}\n        inspectionId=\"999999999-0000-0000-9999-999999999999\"\n        controls={controls}\n        uploads={uploads}\n        loading={loading}\n        onReady={() => setLoading(false)}\n        onStartUploadPicture={() => setLoading(true)}\n        onFinishUploadPicture={() => setLoading(false)}\n        onCaptureTourStart={() => console.log('Capture tour process has finished')}\n\n        /** --- With picture quality check\n         * enableComplianceCheck={true}\n         * onComplianceCheckFinish={() => console.log('Picture quality check process has finished')}\n         */\n      />\n    </SafeAreaView>\n  );\n}\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"See the ",(0,o.kt)("a",{parentName:"strong",href:"/docs/js/api/components/capture"},"Capture API")," for more details.")),(0,o.kt)("h2",{id:"advanced-usage"},"Advanced usage"),(0,o.kt)("p",null,"The Capture component also supports using custom capture handlers."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"/* App.jsx */\n\nimport React, { useCallback, useState } from 'react';\nimport { Capture, Controls, Constants, useUploads } from '@monkvision/camera';\nimport { SafeAreaView, StatusBar } from 'react-native';\n\nexport default function App() {\n  const [loading, setLoading] = useState();\n\n  // our custom capture handler\n  const handleCapture = useCallback(async (state, api, event) => {\n    event.preventDefault();\n    setLoading(true);\n\n    const {\n      takePictureAsync,\n      startUploadAsync,\n      setPictureAsync,\n      goNextSight,\n      /** --- With picture quality check ---\n        checkComplianceAsync,\n       */\n    } = api;\n\n    const picture = await takePictureAsync();\n    setPictureAsync(picture);\n\n    const { sights } = state;\n    const { current, ids } = sights.state;\n\n    if (current.index === ids.length - 1) {\n      await startUploadAsync(picture);\n      /** --- With picture quality check ---\n        if (upload.data?.id) { await checkComplianceAsync(upload.data.id); }\n       */\n\n      setLoading(false);\n    } else {\n      setLoading(false);\n      goNextSight();\n\n      await startUploadAsync(picture);\n      /** --- With picture quality check ---\n        if (upload.data?.id) { await checkComplianceAsync(upload.data.id); }\n       */\n    }\n  }, []);\n\n  const uploads = useUploads({ sightIds: Constants.defaultSightIds });\n\n  const controls = [{\n    disabled: loading,\n    onPress: handleCapture,\n    ...Controls.CaptureButtonProps,\n  }];\n\n  return (\n    <SafeAreaView>\n      <StatusBar hidden />\n       <Capture\n        sightIds={Constants.defaultSightIds}\n        inspectionId=\"999999999-0000-0000-9999-999999999999\"\n        controls={controls}\n        uploads={uploads}\n        loading={loading}\n        onReady={() => setLoading(false)}\n        onCaptureTourStart={() => console.log('Capture tour process has finished')}\n\n        /** --- With picture quality check\n         * enableComplianceCheck={true}\n         * onComplianceCheckFinish={() => console.log('Picture quality check process has finished')}\n         */\n      />\n    </SafeAreaView>\n  );\n}\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"See the ",(0,o.kt)("a",{parentName:"strong",href:"/docs/js/api/components/capture"},"Capture API")," for more details.")),(0,o.kt)("h2",{id:"whats-next"},"What's next?"),(0,o.kt)("p",null,"You surely want to analyze and manipulate photos via Monk's predictions,\nbut first we will see how to authenticate before executing a request to our API."))}d.isMDXComponent=!0}}]);